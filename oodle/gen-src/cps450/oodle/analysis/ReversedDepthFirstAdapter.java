/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.analysis;

import java.util.*;
import cps450.oodle.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPAStart().apply(this);
        outStart(node);
    }

    public void inAAStart(AAStart node)
    {
        defaultIn(node);
    }

    public void outAAStart(AAStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAStart(AAStart node)
    {
        inAAStart(node);
        {
            List<PAClassDef> copy = new ArrayList<PAClassDef>(node.getMore());
            Collections.reverse(copy);
            for(PAClassDef e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAClassDef() != null)
        {
            node.getAClassDef().apply(this);
        }
        outAAStart(node);
    }

    public void inAAClassDef(AAClassDef node)
    {
        defaultIn(node);
    }

    public void outAAClassDef(AAClassDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAClassDef(AAClassDef node)
    {
        inAAClassDef(node);
        if(node.getEndId() != null)
        {
            node.getEndId().apply(this);
        }
        {
            List<PAMethodDecl> copy = new ArrayList<PAMethodDecl>(node.getAMethodDecl());
            Collections.reverse(copy);
            for(PAMethodDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAVarDecl> copy = new ArrayList<PAVarDecl>(node.getAVarDecl());
            Collections.reverse(copy);
            for(PAVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAInherit() != null)
        {
            node.getAInherit().apply(this);
        }
        if(node.getStartId() != null)
        {
            node.getStartId().apply(this);
        }
        outAAClassDef(node);
    }

    public void inAAInherit(AAInherit node)
    {
        defaultIn(node);
    }

    public void outAAInherit(AAInherit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAInherit(AAInherit node)
    {
        inAAInherit(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAInherit(node);
    }

    public void inAAVarDecl(AAVarDecl node)
    {
        defaultIn(node);
    }

    public void outAAVarDecl(AAVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAVarDecl(AAVarDecl node)
    {
        inAAVarDecl(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        if(node.getAType() != null)
        {
            node.getAType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAVarDecl(node);
    }

    public void inAAMethodDecl(AAMethodDecl node)
    {
        defaultIn(node);
    }

    public void outAAMethodDecl(AAMethodDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMethodDecl(AAMethodDecl node)
    {
        inAAMethodDecl(node);
        {
            List<PAStmt> copy = new ArrayList<PAStmt>(node.getAStmt());
            Collections.reverse(copy);
            for(PAStmt e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAVarDecl> copy = new ArrayList<PAVarDecl>(node.getVars());
            Collections.reverse(copy);
            for(PAVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAArgDecl> copy = new ArrayList<PAArgDecl>(node.getArgs());
            Collections.reverse(copy);
            for(PAArgDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAType() != null)
        {
            node.getAType().apply(this);
        }
        if(node.getEndId() != null)
        {
            node.getEndId().apply(this);
        }
        if(node.getStartId() != null)
        {
            node.getStartId().apply(this);
        }
        outAAMethodDecl(node);
    }

    public void inAAArgDecl(AAArgDecl node)
    {
        defaultIn(node);
    }

    public void outAAArgDecl(AAArgDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAArgDecl(AAArgDecl node)
    {
        inAAArgDecl(node);
        if(node.getAType() != null)
        {
            node.getAType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAArgDecl(node);
    }

    public void inAIntAType(AIntAType node)
    {
        defaultIn(node);
    }

    public void outAIntAType(AIntAType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntAType(AIntAType node)
    {
        inAIntAType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntAType(node);
    }

    public void inABooleanAType(ABooleanAType node)
    {
        defaultIn(node);
    }

    public void outABooleanAType(ABooleanAType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanAType(ABooleanAType node)
    {
        inABooleanAType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanAType(node);
    }

    public void inAIdAType(AIdAType node)
    {
        defaultIn(node);
    }

    public void outAIdAType(AIdAType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAType(AIdAType node)
    {
        inAIdAType(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdAType(node);
    }

    public void inAStringAType(AStringAType node)
    {
        defaultIn(node);
    }

    public void outAStringAType(AStringAType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringAType(AStringAType node)
    {
        inAStringAType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringAType(node);
    }

    public void inAExpAType(AExpAType node)
    {
        defaultIn(node);
    }

    public void outAExpAType(AExpAType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpAType(AExpAType node)
    {
        inAExpAType(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        if(node.getAType() != null)
        {
            node.getAType().apply(this);
        }
        if(node.getLBar() != null)
        {
            node.getLBar().apply(this);
        }
        outAExpAType(node);
    }

    public void inAAssignAStmt(AAssignAStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignAStmt(AAssignAStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignAStmt(AAssignAStmt node)
    {
        inAAssignAStmt(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        {
            List<PAExpr> copy = new ArrayList<PAExpr>(node.getArray());
            Collections.reverse(copy);
            for(PAExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignAStmt(node);
    }

    public void inAIfAStmt(AIfAStmt node)
    {
        defaultIn(node);
    }

    public void outAIfAStmt(AIfAStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfAStmt(AIfAStmt node)
    {
        inAIfAStmt(node);
        {
            List<PAStmt> copy = new ArrayList<PAStmt>(node.getElseStmt());
            Collections.reverse(copy);
            for(PAStmt e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAStmt> copy = new ArrayList<PAStmt>(node.getIfStmt());
            Collections.reverse(copy);
            for(PAStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfAStmt(node);
    }

    public void inALoopAStmt(ALoopAStmt node)
    {
        defaultIn(node);
    }

    public void outALoopAStmt(ALoopAStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopAStmt(ALoopAStmt node)
    {
        inALoopAStmt(node);
        {
            List<PAStmt> copy = new ArrayList<PAStmt>(node.getAStmt());
            Collections.reverse(copy);
            for(PAStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outALoopAStmt(node);
    }

    public void inACallAStmt(ACallAStmt node)
    {
        defaultIn(node);
    }

    public void outACallAStmt(ACallAStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallAStmt(ACallAStmt node)
    {
        inACallAStmt(node);
        {
            List<PAExpr> copy = new ArrayList<PAExpr>(node.getList());
            Collections.reverse(copy);
            for(PAExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getMethod() != null)
        {
            node.getMethod().apply(this);
        }
        outACallAStmt(node);
    }

    public void inABinAExpr(ABinAExpr node)
    {
        defaultIn(node);
    }

    public void outABinAExpr(ABinAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinAExpr(ABinAExpr node)
    {
        inABinAExpr(node);
        if(node.getE2() != null)
        {
            node.getE2().apply(this);
        }
        if(node.getE1() != null)
        {
            node.getE1().apply(this);
        }
        if(node.getAOp() != null)
        {
            node.getAOp().apply(this);
        }
        outABinAExpr(node);
    }

    public void inAIntAExpr(AIntAExpr node)
    {
        defaultIn(node);
    }

    public void outAIntAExpr(AIntAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntAExpr(AIntAExpr node)
    {
        inAIntAExpr(node);
        if(node.getIntlit() != null)
        {
            node.getIntlit().apply(this);
        }
        outAIntAExpr(node);
    }

    public void inAStrAExpr(AStrAExpr node)
    {
        defaultIn(node);
    }

    public void outAStrAExpr(AStrAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrAExpr(AStrAExpr node)
    {
        inAStrAExpr(node);
        if(node.getStrlit() != null)
        {
            node.getStrlit().apply(this);
        }
        outAStrAExpr(node);
    }

    public void inAIdAExpr(AIdAExpr node)
    {
        defaultIn(node);
    }

    public void outAIdAExpr(AIdAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAExpr(AIdAExpr node)
    {
        inAIdAExpr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdAExpr(node);
    }

    public void inATrueAExpr(ATrueAExpr node)
    {
        defaultIn(node);
    }

    public void outATrueAExpr(ATrueAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueAExpr(ATrueAExpr node)
    {
        inATrueAExpr(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueAExpr(node);
    }

    public void inAFalseAExpr(AFalseAExpr node)
    {
        defaultIn(node);
    }

    public void outAFalseAExpr(AFalseAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseAExpr(AFalseAExpr node)
    {
        inAFalseAExpr(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseAExpr(node);
    }

    public void inANullAExpr(ANullAExpr node)
    {
        defaultIn(node);
    }

    public void outANullAExpr(ANullAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullAExpr(ANullAExpr node)
    {
        inANullAExpr(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outANullAExpr(node);
    }

    public void inAMeAExpr(AMeAExpr node)
    {
        defaultIn(node);
    }

    public void outAMeAExpr(AMeAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMeAExpr(AMeAExpr node)
    {
        inAMeAExpr(node);
        if(node.getMe() != null)
        {
            node.getMe().apply(this);
        }
        outAMeAExpr(node);
    }

    public void inANewAExpr(ANewAExpr node)
    {
        defaultIn(node);
    }

    public void outANewAExpr(ANewAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewAExpr(ANewAExpr node)
    {
        inANewAExpr(node);
        if(node.getAType() != null)
        {
            node.getAType().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outANewAExpr(node);
    }

    public void inAParAExpr(AParAExpr node)
    {
        defaultIn(node);
    }

    public void outAParAExpr(AParAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParAExpr(AParAExpr node)
    {
        inAParAExpr(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        outAParAExpr(node);
    }

    public void inACallAExpr(ACallAExpr node)
    {
        defaultIn(node);
    }

    public void outACallAExpr(ACallAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallAExpr(ACallAExpr node)
    {
        inACallAExpr(node);
        {
            List<PAExpr> copy = new ArrayList<PAExpr>(node.getList());
            Collections.reverse(copy);
            for(PAExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getObj() != null)
        {
            node.getObj().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outACallAExpr(node);
    }

    public void inANegAExpr(ANegAExpr node)
    {
        defaultIn(node);
    }

    public void outANegAExpr(ANegAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegAExpr(ANegAExpr node)
    {
        inANegAExpr(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        if(node.getMinusOp() != null)
        {
            node.getMinusOp().apply(this);
        }
        outANegAExpr(node);
    }

    public void inAPosAExpr(APosAExpr node)
    {
        defaultIn(node);
    }

    public void outAPosAExpr(APosAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPosAExpr(APosAExpr node)
    {
        inAPosAExpr(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        if(node.getPlusOp() != null)
        {
            node.getPlusOp().apply(this);
        }
        outAPosAExpr(node);
    }

    public void inANotAExpr(ANotAExpr node)
    {
        defaultIn(node);
    }

    public void outANotAExpr(ANotAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotAExpr(ANotAExpr node)
    {
        inANotAExpr(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotAExpr(node);
    }

    public void inAArrayAExpr(AArrayAExpr node)
    {
        defaultIn(node);
    }

    public void outAArrayAExpr(AArrayAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayAExpr(AArrayAExpr node)
    {
        inAArrayAExpr(node);
        {
            List<PAExpr> copy = new ArrayList<PAExpr>(node.getAExpr());
            Collections.reverse(copy);
            for(PAExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArrayAExpr(node);
    }

    public void inAOrAOp(AOrAOp node)
    {
        defaultIn(node);
    }

    public void outAOrAOp(AOrAOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrAOp(AOrAOp node)
    {
        inAOrAOp(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrAOp(node);
    }

    public void inAAndAOp(AAndAOp node)
    {
        defaultIn(node);
    }

    public void outAAndAOp(AAndAOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndAOp(AAndAOp node)
    {
        inAAndAOp(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndAOp(node);
    }

    public void inAEqAOp(AEqAOp node)
    {
        defaultIn(node);
    }

    public void outAEqAOp(AEqAOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqAOp(AEqAOp node)
    {
        inAEqAOp(node);
        if(node.getEqOp() != null)
        {
            node.getEqOp().apply(this);
        }
        outAEqAOp(node);
    }

    public void inAGtAOp(AGtAOp node)
    {
        defaultIn(node);
    }

    public void outAGtAOp(AGtAOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtAOp(AGtAOp node)
    {
        inAGtAOp(node);
        if(node.getGtOp() != null)
        {
            node.getGtOp().apply(this);
        }
        outAGtAOp(node);
    }

    public void inALtAOp(ALtAOp node)
    {
        defaultIn(node);
    }

    public void outALtAOp(ALtAOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtAOp(ALtAOp node)
    {
        inALtAOp(node);
        if(node.getLtOp() != null)
        {
            node.getLtOp().apply(this);
        }
        outALtAOp(node);
    }

    public void inAGteqAOp(AGteqAOp node)
    {
        defaultIn(node);
    }

    public void outAGteqAOp(AGteqAOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteqAOp(AGteqAOp node)
    {
        inAGteqAOp(node);
        if(node.getGteqOp() != null)
        {
            node.getGteqOp().apply(this);
        }
        outAGteqAOp(node);
    }

    public void inAConcatAOp(AConcatAOp node)
    {
        defaultIn(node);
    }

    public void outAConcatAOp(AConcatAOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConcatAOp(AConcatAOp node)
    {
        inAConcatAOp(node);
        if(node.getConcatOp() != null)
        {
            node.getConcatOp().apply(this);
        }
        outAConcatAOp(node);
    }

    public void inAPlusAOp(APlusAOp node)
    {
        defaultIn(node);
    }

    public void outAPlusAOp(APlusAOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAOp(APlusAOp node)
    {
        inAPlusAOp(node);
        if(node.getPlusOp() != null)
        {
            node.getPlusOp().apply(this);
        }
        outAPlusAOp(node);
    }

    public void inAMinusAOp(AMinusAOp node)
    {
        defaultIn(node);
    }

    public void outAMinusAOp(AMinusAOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAOp(AMinusAOp node)
    {
        inAMinusAOp(node);
        if(node.getMinusOp() != null)
        {
            node.getMinusOp().apply(this);
        }
        outAMinusAOp(node);
    }

    public void inAMulAOp(AMulAOp node)
    {
        defaultIn(node);
    }

    public void outAMulAOp(AMulAOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulAOp(AMulAOp node)
    {
        inAMulAOp(node);
        if(node.getMultOp() != null)
        {
            node.getMultOp().apply(this);
        }
        outAMulAOp(node);
    }

    public void inADivAOp(ADivAOp node)
    {
        defaultIn(node);
    }

    public void outADivAOp(ADivAOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivAOp(ADivAOp node)
    {
        inADivAOp(node);
        if(node.getDivOp() != null)
        {
            node.getDivOp().apply(this);
        }
        outADivAOp(node);
    }
}
