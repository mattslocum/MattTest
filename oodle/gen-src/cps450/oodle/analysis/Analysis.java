/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.analysis;

import cps450.oodle.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAAStart(AAStart node);
    void caseAAClassDef(AAClassDef node);
    void caseAAInherit(AAInherit node);
    void caseAAVarDecl(AAVarDecl node);
    void caseAAMethodDecl(AAMethodDecl node);
    void caseAAArgDecl(AAArgDecl node);
    void caseAIntAType(AIntAType node);
    void caseABooleanAType(ABooleanAType node);
    void caseAIdAType(AIdAType node);
    void caseAStringAType(AStringAType node);
    void caseAExpAType(AExpAType node);
    void caseAAssignAStmt(AAssignAStmt node);
    void caseAIfAStmt(AIfAStmt node);
    void caseALoopAStmt(ALoopAStmt node);
    void caseACallAStmt(ACallAStmt node);
    void caseABinAExpr(ABinAExpr node);
    void caseAIntAExpr(AIntAExpr node);
    void caseAStrAExpr(AStrAExpr node);
    void caseAIdAExpr(AIdAExpr node);
    void caseATrueAExpr(ATrueAExpr node);
    void caseAFalseAExpr(AFalseAExpr node);
    void caseANullAExpr(ANullAExpr node);
    void caseAMeAExpr(AMeAExpr node);
    void caseANewAExpr(ANewAExpr node);
    void caseAParAExpr(AParAExpr node);
    void caseACallAExpr(ACallAExpr node);
    void caseANegAExpr(ANegAExpr node);
    void caseAPosAExpr(APosAExpr node);
    void caseANotAExpr(ANotAExpr node);
    void caseAArrayAExpr(AArrayAExpr node);
    void caseAOrAOp(AOrAOp node);
    void caseAAndAOp(AAndAOp node);
    void caseAEqAOp(AEqAOp node);
    void caseAGtAOp(AGtAOp node);
    void caseALtAOp(ALtAOp node);
    void caseAGteqAOp(AGteqAOp node);
    void caseAConcatAOp(AConcatAOp node);
    void caseAPlusAOp(APlusAOp node);
    void caseAMinusAOp(AMinusAOp node);
    void caseAMulAOp(AMulAOp node);
    void caseADivAOp(ADivAOp node);

    void caseTAnd(TAnd node);
    void caseTBoolean(TBoolean node);
    void caseTBegin(TBegin node);
    void caseTClassKw(TClassKw node);
    void caseTElse(TElse node);
    void caseTEnd(TEnd node);
    void caseTFalse(TFalse node);
    void caseTFrom(TFrom node);
    void caseTIf(TIf node);
    void caseTInherits(TInherits node);
    void caseTInt(TInt node);
    void caseTIs(TIs node);
    void caseTLoop(TLoop node);
    void caseTMe(TMe node);
    void caseTNew(TNew node);
    void caseTNot(TNot node);
    void caseTNull(TNull node);
    void caseTOr(TOr node);
    void caseTString(TString node);
    void caseTThen(TThen node);
    void caseTTrue(TTrue node);
    void caseTWhile(TWhile node);
    void caseTBang(TBang node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTColon(TColon node);
    void caseTPeriod(TPeriod node);
    void caseTLtOp(TLtOp node);
    void caseTGtOp(TGtOp node);
    void caseTEqOp(TEqOp node);
    void caseTGteqOp(TGteqOp node);
    void caseTConcatOp(TConcatOp node);
    void caseTPlusOp(TPlusOp node);
    void caseTMinusOp(TMinusOp node);
    void caseTMultOp(TMultOp node);
    void caseTDivOp(TDivOp node);
    void caseTAsignOp(TAsignOp node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBar(TLBar node);
    void caseTRBar(TRBar node);
    void caseTId(TId node);
    void caseTIntlit(TIntlit node);
    void caseTStrlit(TStrlit node);
    void caseTContLine(TContLine node);
    void caseTEol(TEol node);
    void caseTBlank(TBlank node);
    void caseTComment(TComment node);
    void caseTErrIllStr(TErrIllStr node);
    void caseTErrUntermStr(TErrUntermStr node);
    void caseTErrIllChar(TErrIllChar node);
    void caseEOF(EOF node);
}
