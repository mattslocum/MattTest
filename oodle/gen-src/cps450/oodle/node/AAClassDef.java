/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AAClassDef extends PAClassDef
{
    private TId _startId_;
    private PAInherit _aInherit_;
    private final LinkedList<PAVarDecl> _aVarDecl_ = new LinkedList<PAVarDecl>();
    private final LinkedList<PAMethodDecl> _aMethodDecl_ = new LinkedList<PAMethodDecl>();
    private TId _endId_;

    public AAClassDef()
    {
        // Constructor
    }

    public AAClassDef(
        @SuppressWarnings("hiding") TId _startId_,
        @SuppressWarnings("hiding") PAInherit _aInherit_,
        @SuppressWarnings("hiding") List<PAVarDecl> _aVarDecl_,
        @SuppressWarnings("hiding") List<PAMethodDecl> _aMethodDecl_,
        @SuppressWarnings("hiding") TId _endId_)
    {
        // Constructor
        setStartId(_startId_);

        setAInherit(_aInherit_);

        setAVarDecl(_aVarDecl_);

        setAMethodDecl(_aMethodDecl_);

        setEndId(_endId_);

    }

    @Override
    public Object clone()
    {
        return new AAClassDef(
            cloneNode(this._startId_),
            cloneNode(this._aInherit_),
            cloneList(this._aVarDecl_),
            cloneList(this._aMethodDecl_),
            cloneNode(this._endId_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAClassDef(this);
    }

    public TId getStartId()
    {
        return this._startId_;
    }

    public void setStartId(TId node)
    {
        if(this._startId_ != null)
        {
            this._startId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._startId_ = node;
    }

    public PAInherit getAInherit()
    {
        return this._aInherit_;
    }

    public void setAInherit(PAInherit node)
    {
        if(this._aInherit_ != null)
        {
            this._aInherit_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aInherit_ = node;
    }

    public LinkedList<PAVarDecl> getAVarDecl()
    {
        return this._aVarDecl_;
    }

    public void setAVarDecl(List<PAVarDecl> list)
    {
        this._aVarDecl_.clear();
        this._aVarDecl_.addAll(list);
        for(PAVarDecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PAMethodDecl> getAMethodDecl()
    {
        return this._aMethodDecl_;
    }

    public void setAMethodDecl(List<PAMethodDecl> list)
    {
        this._aMethodDecl_.clear();
        this._aMethodDecl_.addAll(list);
        for(PAMethodDecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TId getEndId()
    {
        return this._endId_;
    }

    public void setEndId(TId node)
    {
        if(this._endId_ != null)
        {
            this._endId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endId_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._startId_)
            + toString(this._aInherit_)
            + toString(this._aVarDecl_)
            + toString(this._aMethodDecl_)
            + toString(this._endId_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._startId_ == child)
        {
            this._startId_ = null;
            return;
        }

        if(this._aInherit_ == child)
        {
            this._aInherit_ = null;
            return;
        }

        if(this._aVarDecl_.remove(child))
        {
            return;
        }

        if(this._aMethodDecl_.remove(child))
        {
            return;
        }

        if(this._endId_ == child)
        {
            this._endId_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._startId_ == oldChild)
        {
            setStartId((TId) newChild);
            return;
        }

        if(this._aInherit_ == oldChild)
        {
            setAInherit((PAInherit) newChild);
            return;
        }

        for(ListIterator<PAVarDecl> i = this._aVarDecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAVarDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PAMethodDecl> i = this._aMethodDecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAMethodDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._endId_ == oldChild)
        {
            setEndId((TId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
