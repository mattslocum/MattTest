/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AIfAStmt extends PAStmt
{
    private TIf _if_;
    private PAExpr _aExpr_;
    private final LinkedList<PAStmt> _ifStmt_ = new LinkedList<PAStmt>();
    private final LinkedList<PAStmt> _elseStmt_ = new LinkedList<PAStmt>();

    public AIfAStmt()
    {
        // Constructor
    }

    public AIfAStmt(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PAExpr _aExpr_,
        @SuppressWarnings("hiding") List<PAStmt> _ifStmt_,
        @SuppressWarnings("hiding") List<PAStmt> _elseStmt_)
    {
        // Constructor
        setIf(_if_);

        setAExpr(_aExpr_);

        setIfStmt(_ifStmt_);

        setElseStmt(_elseStmt_);

    }

    @Override
    public Object clone()
    {
        return new AIfAStmt(
            cloneNode(this._if_),
            cloneNode(this._aExpr_),
            cloneList(this._ifStmt_),
            cloneList(this._elseStmt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfAStmt(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PAExpr getAExpr()
    {
        return this._aExpr_;
    }

    public void setAExpr(PAExpr node)
    {
        if(this._aExpr_ != null)
        {
            this._aExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aExpr_ = node;
    }

    public LinkedList<PAStmt> getIfStmt()
    {
        return this._ifStmt_;
    }

    public void setIfStmt(List<PAStmt> list)
    {
        this._ifStmt_.clear();
        this._ifStmt_.addAll(list);
        for(PAStmt e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PAStmt> getElseStmt()
    {
        return this._elseStmt_;
    }

    public void setElseStmt(List<PAStmt> list)
    {
        this._elseStmt_.clear();
        this._elseStmt_.addAll(list);
        for(PAStmt e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._aExpr_)
            + toString(this._ifStmt_)
            + toString(this._elseStmt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._aExpr_ == child)
        {
            this._aExpr_ = null;
            return;
        }

        if(this._ifStmt_.remove(child))
        {
            return;
        }

        if(this._elseStmt_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._aExpr_ == oldChild)
        {
            setAExpr((PAExpr) newChild);
            return;
        }

        for(ListIterator<PAStmt> i = this._ifStmt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAStmt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PAStmt> i = this._elseStmt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAStmt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
