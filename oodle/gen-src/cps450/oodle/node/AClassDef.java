/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AClassDef extends PClassDef
{
    private TClassKw _classKw_;
    private TId _startId_;
    private PClassInherit _classInherit_;
    private TIs _is_;
    private TEol _eol_;
    private final LinkedList<PVarDecl> _varDecl_ = new LinkedList<PVarDecl>();
    private final LinkedList<PMethodDecl> _methodDecl_ = new LinkedList<PMethodDecl>();
    private TEnd _end_;
    private TId _endId_;

    public AClassDef()
    {
        // Constructor
    }

    public AClassDef(
        @SuppressWarnings("hiding") TClassKw _classKw_,
        @SuppressWarnings("hiding") TId _startId_,
        @SuppressWarnings("hiding") PClassInherit _classInherit_,
        @SuppressWarnings("hiding") TIs _is_,
        @SuppressWarnings("hiding") TEol _eol_,
        @SuppressWarnings("hiding") List<PVarDecl> _varDecl_,
        @SuppressWarnings("hiding") List<PMethodDecl> _methodDecl_,
        @SuppressWarnings("hiding") TEnd _end_,
        @SuppressWarnings("hiding") TId _endId_)
    {
        // Constructor
        setClassKw(_classKw_);

        setStartId(_startId_);

        setClassInherit(_classInherit_);

        setIs(_is_);

        setEol(_eol_);

        setVarDecl(_varDecl_);

        setMethodDecl(_methodDecl_);

        setEnd(_end_);

        setEndId(_endId_);

    }

    @Override
    public Object clone()
    {
        return new AClassDef(
            cloneNode(this._classKw_),
            cloneNode(this._startId_),
            cloneNode(this._classInherit_),
            cloneNode(this._is_),
            cloneNode(this._eol_),
            cloneList(this._varDecl_),
            cloneList(this._methodDecl_),
            cloneNode(this._end_),
            cloneNode(this._endId_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassDef(this);
    }

    public TClassKw getClassKw()
    {
        return this._classKw_;
    }

    public void setClassKw(TClassKw node)
    {
        if(this._classKw_ != null)
        {
            this._classKw_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classKw_ = node;
    }

    public TId getStartId()
    {
        return this._startId_;
    }

    public void setStartId(TId node)
    {
        if(this._startId_ != null)
        {
            this._startId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._startId_ = node;
    }

    public PClassInherit getClassInherit()
    {
        return this._classInherit_;
    }

    public void setClassInherit(PClassInherit node)
    {
        if(this._classInherit_ != null)
        {
            this._classInherit_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classInherit_ = node;
    }

    public TIs getIs()
    {
        return this._is_;
    }

    public void setIs(TIs node)
    {
        if(this._is_ != null)
        {
            this._is_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._is_ = node;
    }

    public TEol getEol()
    {
        return this._eol_;
    }

    public void setEol(TEol node)
    {
        if(this._eol_ != null)
        {
            this._eol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eol_ = node;
    }

    public LinkedList<PVarDecl> getVarDecl()
    {
        return this._varDecl_;
    }

    public void setVarDecl(List<PVarDecl> list)
    {
        this._varDecl_.clear();
        this._varDecl_.addAll(list);
        for(PVarDecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PMethodDecl> getMethodDecl()
    {
        return this._methodDecl_;
    }

    public void setMethodDecl(List<PMethodDecl> list)
    {
        this._methodDecl_.clear();
        this._methodDecl_.addAll(list);
        for(PMethodDecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    public TId getEndId()
    {
        return this._endId_;
    }

    public void setEndId(TId node)
    {
        if(this._endId_ != null)
        {
            this._endId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endId_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classKw_)
            + toString(this._startId_)
            + toString(this._classInherit_)
            + toString(this._is_)
            + toString(this._eol_)
            + toString(this._varDecl_)
            + toString(this._methodDecl_)
            + toString(this._end_)
            + toString(this._endId_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classKw_ == child)
        {
            this._classKw_ = null;
            return;
        }

        if(this._startId_ == child)
        {
            this._startId_ = null;
            return;
        }

        if(this._classInherit_ == child)
        {
            this._classInherit_ = null;
            return;
        }

        if(this._is_ == child)
        {
            this._is_ = null;
            return;
        }

        if(this._eol_ == child)
        {
            this._eol_ = null;
            return;
        }

        if(this._varDecl_.remove(child))
        {
            return;
        }

        if(this._methodDecl_.remove(child))
        {
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        if(this._endId_ == child)
        {
            this._endId_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classKw_ == oldChild)
        {
            setClassKw((TClassKw) newChild);
            return;
        }

        if(this._startId_ == oldChild)
        {
            setStartId((TId) newChild);
            return;
        }

        if(this._classInherit_ == oldChild)
        {
            setClassInherit((PClassInherit) newChild);
            return;
        }

        if(this._is_ == oldChild)
        {
            setIs((TIs) newChild);
            return;
        }

        if(this._eol_ == oldChild)
        {
            setEol((TEol) newChild);
            return;
        }

        for(ListIterator<PVarDecl> i = this._varDecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVarDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PMethodDecl> i = this._methodDecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMethodDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        if(this._endId_ == oldChild)
        {
            setEndId((TId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
