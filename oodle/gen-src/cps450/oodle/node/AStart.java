/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AStart extends PStart
{
    private TEol _e1_;
    private PClassDef _classDef_;
    private final LinkedList<PClassMore> _classMore_ = new LinkedList<PClassMore>();
    private TEol _e2_;

    public AStart()
    {
        // Constructor
    }

    public AStart(
        @SuppressWarnings("hiding") TEol _e1_,
        @SuppressWarnings("hiding") PClassDef _classDef_,
        @SuppressWarnings("hiding") List<PClassMore> _classMore_,
        @SuppressWarnings("hiding") TEol _e2_)
    {
        // Constructor
        setE1(_e1_);

        setClassDef(_classDef_);

        setClassMore(_classMore_);

        setE2(_e2_);

    }

    @Override
    public Object clone()
    {
        return new AStart(
            cloneNode(this._e1_),
            cloneNode(this._classDef_),
            cloneList(this._classMore_),
            cloneNode(this._e2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStart(this);
    }

    public TEol getE1()
    {
        return this._e1_;
    }

    public void setE1(TEol node)
    {
        if(this._e1_ != null)
        {
            this._e1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e1_ = node;
    }

    public PClassDef getClassDef()
    {
        return this._classDef_;
    }

    public void setClassDef(PClassDef node)
    {
        if(this._classDef_ != null)
        {
            this._classDef_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classDef_ = node;
    }

    public LinkedList<PClassMore> getClassMore()
    {
        return this._classMore_;
    }

    public void setClassMore(List<PClassMore> list)
    {
        this._classMore_.clear();
        this._classMore_.addAll(list);
        for(PClassMore e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TEol getE2()
    {
        return this._e2_;
    }

    public void setE2(TEol node)
    {
        if(this._e2_ != null)
        {
            this._e2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._e1_)
            + toString(this._classDef_)
            + toString(this._classMore_)
            + toString(this._e2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._e1_ == child)
        {
            this._e1_ = null;
            return;
        }

        if(this._classDef_ == child)
        {
            this._classDef_ = null;
            return;
        }

        if(this._classMore_.remove(child))
        {
            return;
        }

        if(this._e2_ == child)
        {
            this._e2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._e1_ == oldChild)
        {
            setE1((TEol) newChild);
            return;
        }

        if(this._classDef_ == oldChild)
        {
            setClassDef((PClassDef) newChild);
            return;
        }

        for(ListIterator<PClassMore> i = this._classMore_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PClassMore) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._e2_ == oldChild)
        {
            setE2((TEol) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
