/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class ACallAStmt extends PAStmt
{
    private PAExpr _method_;
    private TId _id_;
    private final LinkedList<PAExpr> _list_ = new LinkedList<PAExpr>();

    public ACallAStmt()
    {
        // Constructor
    }

    public ACallAStmt(
        @SuppressWarnings("hiding") PAExpr _method_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") List<PAExpr> _list_)
    {
        // Constructor
        setMethod(_method_);

        setId(_id_);

        setList(_list_);

    }

    @Override
    public Object clone()
    {
        return new ACallAStmt(
            cloneNode(this._method_),
            cloneNode(this._id_),
            cloneList(this._list_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACallAStmt(this);
    }

    public PAExpr getMethod()
    {
        return this._method_;
    }

    public void setMethod(PAExpr node)
    {
        if(this._method_ != null)
        {
            this._method_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._method_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public LinkedList<PAExpr> getList()
    {
        return this._list_;
    }

    public void setList(List<PAExpr> list)
    {
        this._list_.clear();
        this._list_.addAll(list);
        for(PAExpr e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._method_)
            + toString(this._id_)
            + toString(this._list_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._method_ == child)
        {
            this._method_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._list_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._method_ == oldChild)
        {
            setMethod((PAExpr) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        for(ListIterator<PAExpr> i = this._list_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAExpr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
