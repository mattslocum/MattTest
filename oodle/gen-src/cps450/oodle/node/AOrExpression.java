/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AOrExpression extends PExpression
{
    private PExpression _expression_;
    private TOr _or_;
    private PExpr2 _expr2_;

    public AOrExpression()
    {
        // Constructor
    }

    public AOrExpression(
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TOr _or_,
        @SuppressWarnings("hiding") PExpr2 _expr2_)
    {
        // Constructor
        setExpression(_expression_);

        setOr(_or_);

        setExpr2(_expr2_);

    }

    @Override
    public Object clone()
    {
        return new AOrExpression(
            cloneNode(this._expression_),
            cloneNode(this._or_),
            cloneNode(this._expr2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrExpression(this);
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TOr getOr()
    {
        return this._or_;
    }

    public void setOr(TOr node)
    {
        if(this._or_ != null)
        {
            this._or_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._or_ = node;
    }

    public PExpr2 getExpr2()
    {
        return this._expr2_;
    }

    public void setExpr2(PExpr2 node)
    {
        if(this._expr2_ != null)
        {
            this._expr2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expression_)
            + toString(this._or_)
            + toString(this._expr2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._or_ == child)
        {
            this._or_ = null;
            return;
        }

        if(this._expr2_ == child)
        {
            this._expr2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._or_ == oldChild)
        {
            setOr((TOr) newChild);
            return;
        }

        if(this._expr2_ == oldChild)
        {
            setExpr2((PExpr2) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
