/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class ANotExpr8 extends PExpr8
{
    private TNot _not_;
    private PExpr8 _expr8_;

    public ANotExpr8()
    {
        // Constructor
    }

    public ANotExpr8(
        @SuppressWarnings("hiding") TNot _not_,
        @SuppressWarnings("hiding") PExpr8 _expr8_)
    {
        // Constructor
        setNot(_not_);

        setExpr8(_expr8_);

    }

    @Override
    public Object clone()
    {
        return new ANotExpr8(
            cloneNode(this._not_),
            cloneNode(this._expr8_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANotExpr8(this);
    }

    public TNot getNot()
    {
        return this._not_;
    }

    public void setNot(TNot node)
    {
        if(this._not_ != null)
        {
            this._not_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._not_ = node;
    }

    public PExpr8 getExpr8()
    {
        return this._expr8_;
    }

    public void setExpr8(PExpr8 node)
    {
        if(this._expr8_ != null)
        {
            this._expr8_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr8_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._not_)
            + toString(this._expr8_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._not_ == child)
        {
            this._not_ = null;
            return;
        }

        if(this._expr8_ == child)
        {
            this._expr8_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._not_ == oldChild)
        {
            setNot((TNot) newChild);
            return;
        }

        if(this._expr8_ == oldChild)
        {
            setExpr8((PExpr8) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
