/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class ALoopStmt extends PLoopStmt
{
    private TLoop _loopStart_;
    private TWhile _while_;
    private PExpression _expression_;
    private TEol _eol_;
    private PStatementList _statementList_;
    private TEnd _end_;
    private TLoop _loopEnd_;

    public ALoopStmt()
    {
        // Constructor
    }

    public ALoopStmt(
        @SuppressWarnings("hiding") TLoop _loopStart_,
        @SuppressWarnings("hiding") TWhile _while_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TEol _eol_,
        @SuppressWarnings("hiding") PStatementList _statementList_,
        @SuppressWarnings("hiding") TEnd _end_,
        @SuppressWarnings("hiding") TLoop _loopEnd_)
    {
        // Constructor
        setLoopStart(_loopStart_);

        setWhile(_while_);

        setExpression(_expression_);

        setEol(_eol_);

        setStatementList(_statementList_);

        setEnd(_end_);

        setLoopEnd(_loopEnd_);

    }

    @Override
    public Object clone()
    {
        return new ALoopStmt(
            cloneNode(this._loopStart_),
            cloneNode(this._while_),
            cloneNode(this._expression_),
            cloneNode(this._eol_),
            cloneNode(this._statementList_),
            cloneNode(this._end_),
            cloneNode(this._loopEnd_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALoopStmt(this);
    }

    public TLoop getLoopStart()
    {
        return this._loopStart_;
    }

    public void setLoopStart(TLoop node)
    {
        if(this._loopStart_ != null)
        {
            this._loopStart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._loopStart_ = node;
    }

    public TWhile getWhile()
    {
        return this._while_;
    }

    public void setWhile(TWhile node)
    {
        if(this._while_ != null)
        {
            this._while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._while_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TEol getEol()
    {
        return this._eol_;
    }

    public void setEol(TEol node)
    {
        if(this._eol_ != null)
        {
            this._eol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eol_ = node;
    }

    public PStatementList getStatementList()
    {
        return this._statementList_;
    }

    public void setStatementList(PStatementList node)
    {
        if(this._statementList_ != null)
        {
            this._statementList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementList_ = node;
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    public TLoop getLoopEnd()
    {
        return this._loopEnd_;
    }

    public void setLoopEnd(TLoop node)
    {
        if(this._loopEnd_ != null)
        {
            this._loopEnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._loopEnd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._loopStart_)
            + toString(this._while_)
            + toString(this._expression_)
            + toString(this._eol_)
            + toString(this._statementList_)
            + toString(this._end_)
            + toString(this._loopEnd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._loopStart_ == child)
        {
            this._loopStart_ = null;
            return;
        }

        if(this._while_ == child)
        {
            this._while_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._eol_ == child)
        {
            this._eol_ = null;
            return;
        }

        if(this._statementList_ == child)
        {
            this._statementList_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        if(this._loopEnd_ == child)
        {
            this._loopEnd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._loopStart_ == oldChild)
        {
            setLoopStart((TLoop) newChild);
            return;
        }

        if(this._while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._eol_ == oldChild)
        {
            setEol((TEol) newChild);
            return;
        }

        if(this._statementList_ == oldChild)
        {
            setStatementList((PStatementList) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        if(this._loopEnd_ == oldChild)
        {
            setLoopEnd((TLoop) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
