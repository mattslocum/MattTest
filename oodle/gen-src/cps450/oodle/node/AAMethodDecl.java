/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AAMethodDecl extends PAMethodDecl
{
    private TId _startId_;
    private TId _endId_;
    private PAType _aType_;
    private final LinkedList<PAArgDecl> _args_ = new LinkedList<PAArgDecl>();
    private final LinkedList<PAVarDecl> _vars_ = new LinkedList<PAVarDecl>();
    private final LinkedList<PAStmt> _aStmt_ = new LinkedList<PAStmt>();

    public AAMethodDecl()
    {
        // Constructor
    }

    public AAMethodDecl(
        @SuppressWarnings("hiding") TId _startId_,
        @SuppressWarnings("hiding") TId _endId_,
        @SuppressWarnings("hiding") PAType _aType_,
        @SuppressWarnings("hiding") List<PAArgDecl> _args_,
        @SuppressWarnings("hiding") List<PAVarDecl> _vars_,
        @SuppressWarnings("hiding") List<PAStmt> _aStmt_)
    {
        // Constructor
        setStartId(_startId_);

        setEndId(_endId_);

        setAType(_aType_);

        setArgs(_args_);

        setVars(_vars_);

        setAStmt(_aStmt_);

    }

    @Override
    public Object clone()
    {
        return new AAMethodDecl(
            cloneNode(this._startId_),
            cloneNode(this._endId_),
            cloneNode(this._aType_),
            cloneList(this._args_),
            cloneList(this._vars_),
            cloneList(this._aStmt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAMethodDecl(this);
    }

    public TId getStartId()
    {
        return this._startId_;
    }

    public void setStartId(TId node)
    {
        if(this._startId_ != null)
        {
            this._startId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._startId_ = node;
    }

    public TId getEndId()
    {
        return this._endId_;
    }

    public void setEndId(TId node)
    {
        if(this._endId_ != null)
        {
            this._endId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endId_ = node;
    }

    public PAType getAType()
    {
        return this._aType_;
    }

    public void setAType(PAType node)
    {
        if(this._aType_ != null)
        {
            this._aType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aType_ = node;
    }

    public LinkedList<PAArgDecl> getArgs()
    {
        return this._args_;
    }

    public void setArgs(List<PAArgDecl> list)
    {
        this._args_.clear();
        this._args_.addAll(list);
        for(PAArgDecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PAVarDecl> getVars()
    {
        return this._vars_;
    }

    public void setVars(List<PAVarDecl> list)
    {
        this._vars_.clear();
        this._vars_.addAll(list);
        for(PAVarDecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PAStmt> getAStmt()
    {
        return this._aStmt_;
    }

    public void setAStmt(List<PAStmt> list)
    {
        this._aStmt_.clear();
        this._aStmt_.addAll(list);
        for(PAStmt e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._startId_)
            + toString(this._endId_)
            + toString(this._aType_)
            + toString(this._args_)
            + toString(this._vars_)
            + toString(this._aStmt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._startId_ == child)
        {
            this._startId_ = null;
            return;
        }

        if(this._endId_ == child)
        {
            this._endId_ = null;
            return;
        }

        if(this._aType_ == child)
        {
            this._aType_ = null;
            return;
        }

        if(this._args_.remove(child))
        {
            return;
        }

        if(this._vars_.remove(child))
        {
            return;
        }

        if(this._aStmt_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._startId_ == oldChild)
        {
            setStartId((TId) newChild);
            return;
        }

        if(this._endId_ == oldChild)
        {
            setEndId((TId) newChild);
            return;
        }

        if(this._aType_ == oldChild)
        {
            setAType((PAType) newChild);
            return;
        }

        for(ListIterator<PAArgDecl> i = this._args_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAArgDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PAVarDecl> i = this._vars_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAVarDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PAStmt> i = this._aStmt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAStmt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
