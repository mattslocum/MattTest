
Package cps450.oodle;

Helpers
  letter = ['A'..'Z'] | ['a'..'z'];
  digit = ['0'..'9'];
  cr = 13;
  lf = 10;
  tab = 9;
  not_cr_lf = [[0..127] - [cr + lf]];
  octal = ['0'..'7'];
  escape = ('\t'|'\n'|'\f'|'\r'|'\"'|'\\'|'\' octal octal octal);
  
Tokens
  and = 'and';
  boolean = 'boolean';
  begin = 'begin';
  class_kw = 'class';
  else = 'else';
  end = 'end';
  false = 'false';
  from = 'from';
  if = 'if';
  inherits = 'inherits';
  int = 'int';
  is = 'is';
  loop = 'loop';
  me = 'me';
  new = 'new';
  not = 'not';
  null = 'null';
  or = 'or';
  string = 'string';
  then = 'then';
  true = 'true';
  while = 'while';
  
  bang = '!';

  comma = ',';
  semicolon = ';';
  colon = ':';
  period = '.';

  lt_op = '<';
  gt_op = '>';
  eq_op = '=';
  gteq_op = '>=';

  concat_op = '&';
  plus_op = '+';
  minus_op = '-';
  mult_op = '*';
  div_op = '/';

  asign_op = ':=';
  l_par = '(';
  r_par = ')';
  l_bar = '[';
  r_bar = ']';

  id = (letter | '_') (letter | digit | '_')*;
  intlit = '-'? digit+;
  strlit = '"' ([[not_cr_lf - '"'] - '\']|escape)*  '"';

  cont_line = '_' (cr | lf | cr lf);
  eol = (cr | lf | cr lf)+;

  blank = (' ' | tab)+;
  comment = '~' not_cr_lf*;
  
  err_ill_str = '"' [not_cr_lf - '"']*  '"';
  err_unterm_str = '"' [not_cr_lf - '"']*;
  err_ill_char = [0..255];
  
Ignored Tokens

  cont_line,
  blank,
  comment,
  err_ill_str,
  err_unterm_str,
  err_ill_char;
  
Productions

  start {-> a_start} = [e1]:T.eol* class_def class_more* [e2]:T.eol*
  		{-> New a_start(class_def.a_class_def, [class_more.a_class_def])};
  class_more {-> a_class_def} = T.eol* class_def {-> class_def.a_class_def};
  
  class_def {-> a_class_def} = T.class_kw [start_id]:T.id class_inherit? T.is T.eol+ 
  		var_decl*
  		method_decl*
  		T.end [end_id]:T.id
  		{-> New a_class_def(start_id, class_inherit.a_inherit, [var_decl.a_var_decl], [method_decl.a_method_decl], end_id)};
  class_inherit {-> a_inherit} = T.inherits T.from T.id {-> New a_inherit(T.id)};
  
  var_decl {-> a_var_decl} = T.id var_type? var_assign? T.eol+
  		{-> New a_var_decl(T.id, var_type.a_type, var_assign.a_expr)};
  var_type {-> a_type} = T.colon type {-> type.a_type};
  var_assign {-> a_expr}= T.asign_op expr {-> expr.a_expr};
  
  method_decl {-> a_method_decl} = [start_id]:T.id T.l_par [args]:argument_decl_list? T.r_par var_type? T.is [e1]:T.eol+
  		[vars]:var_decl*
  		T.begin [e2]:T.eol+
  		statement_list
  		T.end [end_id]:T.id [e3]:T.eol+
  		{-> New a_method_decl(start_id, end_id, var_type.a_type, [args.a_arg_decl], [vars.a_var_decl], [statement_list.a_stmt])};
  
  argument_decl_list {-> a_arg_decl*} = argument_decl argument_decl_list2*
  		{-> [argument_decl.a_arg_decl, argument_decl_list2.a_arg_decl]};
  argument_decl_list2 {-> a_arg_decl} = T.semicolon argument_decl
  		{-> argument_decl.a_arg_decl};
  
  argument_decl {-> a_arg_decl} = T.id T.colon type
  		{-> New a_arg_decl(T.id, type.a_type)};
  
  type {-> a_type} =  {int}	T.int 	{-> New a_type.int(T.int) }
  		| {string}	T.string 		{-> New a_type.string(T.string) }
  		| {boolean}	T.boolean 		{-> New a_type.boolean(T.boolean) }
  		| {id}		T.id 			{-> New a_type.id(T.id) }
  		| {exp}		type T.l_bar expr T.r_bar	{-> New a_type.exp(T.l_bar, type.a_type, expr.a_expr) };
  
  statement_list {-> a_stmt*}= [list]:statement_list2* {-> [list.a_stmt]};
  statement_list2 {-> a_stmt}= statement T.eol+ {-> statement.a_stmt};
  
  statement {-> a_stmt} = {assign} 	T.id [array]:assignment_stmt2* T.asign_op expr
  						  {-> New a_stmt.assign(T.id, [array.a_expr], expr.a_expr)}
  			| {if} 		T.if expr T.then T.eol+ 
  						[if_stmt]:statement_list else_part? T.end [end_if]:T.if
  						{-> New a_stmt.if(T.if, expr.a_expr, [if_stmt.a_stmt], [else_part.a_stmt])}
  			| {loop}	[loop_start]:T.loop T.while expr T.eol+
  						statement_list T.end [loop_end]:T.loop
  						{-> New a_stmt.loop(T.while, expr.a_expr, [statement_list.a_stmt])}
  			| {call}	exp_period? T.id T.l_par expr_list? T.r_par
  						{-> New a_stmt.call(exp_period.a_expr, T.id, [expr_list.a_expr])}
  ;
  
  assignment_stmt2 {-> a_expr} = T.l_bar expr T.r_bar {-> expr.a_expr};
  
  else_part {-> a_stmt*} = T.else T.eol+ statement_list {-> [statement_list.a_stmt]};
  
  exp_period {-> a_expr} = expr10 T.period {-> expr10.a_expr};
  
  expr_list {-> a_expr*} = expr expr_list2*	{-> [expr.a_expr, expr_list2.a_expr]};
  expr_list2 {-> a_expr} = T.comma expr	{-> expr.a_expr};
  
  expr {-> a_expr} = {or}	[e1]:expr T.or [e2]:expr2	{-> New a_expr.bin(New a_op.or(T.or), e1.a_expr, e2.a_expr)}
  	   | {other}	[e]:expr2 {-> e.a_expr};
  		
  expr2 {-> a_expr}  = {and} [e1]:expr2 T.and [e2]:expr3	{-> New a_expr.bin(New a_op.and(T.and), e1.a_expr, e2.a_expr)}
  		| {other}	[e]:expr3 {-> e.a_expr};

  expr3 {-> a_expr}	= {eq} 	[e1]:expr5 T.eq_op [e2]:expr5 {-> New a_expr.bin(New a_op.eq(T.eq_op), e1.a_expr, e2.a_expr)}
  		| {gt} 	[e1]:expr5 T.gt_op [e2]:expr5	{-> New a_expr.bin(New a_op.gt(T.gt_op), e1.a_expr, e2.a_expr)}
  		| {lt} 	[e1]:expr5 T.lt_op [e2]:expr5	{-> New a_expr.bin(New a_op.lt(T.lt_op), e1.a_expr, e2.a_expr)}
  		| {gteq} 	[e1]:expr5 T.gteq_op [e2]:expr5	{-> New a_expr.bin(New a_op.gteq(T.gteq_op), e1.a_expr, e2.a_expr)}
  		| {other} 	[e]:expr5 {-> e.a_expr};
  
  expr5 {-> a_expr} = {concat}	[e1]:expr5 T.concat_op [e2]:expr6	{-> New a_expr.bin(New a_op.concat(T.concat_op), e1.a_expr, e2.a_expr)}
  		| {other}	[e]:expr6	{-> e.a_expr};

  expr6 {-> a_expr} = {add}   [e1]:expr6 T.plus_op [e2]:expr7	{-> New a_expr.bin(New a_op.plus(T.plus_op), e1.a_expr, e2.a_expr)}
        | {sub}   [e1]:expr6 T.minus_op [e2]:expr7	{-> New a_expr.bin(New a_op.minus(T.minus_op), e1.a_expr, e2.a_expr)}
        | {other} [e]:expr7	{-> e.a_expr}
  ;
  
  expr7 {-> a_expr} = {mul}		[e1]:expr7 T.mult_op [e2]:expr8	{-> New a_expr.bin(New a_op.mul(T.mult_op), e1.a_expr, e2.a_expr)}
  		| {div}		[e1]:expr7 T.div_op [e2]:expr8	{-> New a_expr.bin(New a_op.div(T.div_op), e1.a_expr, e2.a_expr)}
  		| {other}	[e]:expr8	{-> e.a_expr};
  		
  expr8 {-> a_expr} = {neg}		T.minus_op [e]:expr9	{-> New a_expr.neg(T.minus_op, e.a_expr)}
  		| {pos}		T.plus_op [e]:expr9	{-> New a_expr.pos(T.plus_op, e.a_expr)}
  		| {not}		T.not [e]:expr8  /* expr8 for "not not" (different from Mr. Schaub)*/	
  					{-> New a_expr.not(T.not, e.a_expr)}
  		| {other}	[e]:expr9	{-> e.a_expr};
  		
  expr9 {-> a_expr} = {array} T.id [e]:exp_arr_inx+	{-> New a_expr.array(T.id, [e.a_expr])}
  		| {other} [e]:expr10	{-> e.a_expr};
  exp_arr_inx {-> a_expr} = T.l_bar expr10 T.r_bar {-> expr10.a_expr}; 
  
  expr10 {-> a_expr} = {id} 	T.id	{-> New a_expr.id(T.id)}
  		 | {string} T.strlit	{-> New a_expr.str(T.strlit)}
  		 | {int_lit} T.intlit	{-> New a_expr.int(T.intlit)}
  		 | {true}	T.true	{-> New a_expr.true(T.true)}
  		 | {false}	T.false	{-> New a_expr.false(T.false)}
  		 | {null}	T.null	{-> New a_expr.null(T.null)}
  		 | {me}		T.me	{-> New a_expr.me(T.me)}
  		 | {new}	T.new type	{-> New a_expr.new(T.new, type.a_type)}
         | {par}  	T.l_par expr T.r_par	{-> New a_expr.par(expr.a_expr)}
         | {call}  	[obj]:obj_exp? T.id T.l_par [list]:expr_list? T.r_par	
         			{-> New a_expr.call(T.id, obj.a_expr, [list.a_expr])}
  ;
  
  obj_exp {-> a_expr} = expr10 T.period {-> expr10.a_expr};
  			 
  
Abstract Syntax Tree
  
  a_start = a_class_def [more]:a_class_def*;
  
  a_class_def = [start_id]:T.id a_inherit? a_var_decl* a_method_decl* [end_id]:T.id; 
  
  a_inherit = T.id;
  
  a_var_decl = T.id a_type? a_expr?;
  
  a_method_decl = [start_id]:T.id [end_id]:T.id a_type? [args]:a_arg_decl* [vars]:a_var_decl* a_stmt*;
  
  a_arg_decl = T.id a_type;
  
  a_type = {int} T.int
         | {boolean} T.boolean
         | {id} T.id
         | {string} T.string
         | {exp} T.l_bar a_type a_expr
  ;
  
  a_stmt = {assign} T.id [array]:a_expr* a_expr
  		 | {if} T.if a_expr [if_stmt]:a_stmt* [else_stmt]:a_stmt*
  		 | {loop} T.while a_expr a_stmt*
  		 | {call} [method]:a_expr? T.id [list]:a_expr*
  ;
  
  a_expr = {bin} a_op [e1]:a_expr [e2]:a_expr
  		 | {int} T.intlit
  		 | {str} T.strlit
  		 | {id} T.id
  		 | {true} T.true
  		 | {false} T.false
  		 | {null} T.null
  		 | {me} T.me
  		 | {new} T.new a_type
  		 | {par} a_expr
  		 | {call} T.id [obj]:a_expr? [list]:a_expr*
  		 | {neg} T.minus_op a_expr
  		 | {pos} T.plus_op a_expr
  		 | {not} T.not a_expr
  		 | {array} T.id a_expr+
;
  		 
  a_op = {or} T.or
  	   | {and} T.and
  	   | {eq} T.eq_op
  	   | {gt} T.gt_op
  	   | {lt} T.lt_op
  	   | {gteq} T.gteq_op
  	   | {concat} T.concat_op
  	   | {plus} T.plus_op
  	   | {minus} T.minus_op
  	   | {mul} T.mult_op
  	   | {div} T.div_op
  ;
  