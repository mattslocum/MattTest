
Package cps450.oodle;

Helpers
  letter = ['A'..'Z'] | ['a'..'z'];
  digit = ['0'..'9'];
  cr = 13;
  lf = 10;
  tab = 9;
  not_cr_lf = [[0..127] - [cr + lf]];
  octal = ['0'..'7'];
  escape = ('\t'|'\n'|'\f'|'\r'|'\"'|'\\'|'\' octal octal octal);
  
Tokens
  and = 'and';
  boolean = 'boolean';
  begin = 'begin';
  class_kw = 'class';
  else = 'else';
  end = 'end';
  false = 'false';
  from = 'from';
  if = 'if';
  inherits = 'inherits';
  int = 'int';
  is = 'is';
  loop = 'loop';
  me = 'me';
  new = 'new';
  not = 'not';
  null = 'null';
  or = 'or';
  string = 'string';
  then = 'then';
  true = 'true';
  while = 'while';
  
  bang = '!';

  comma = ',';
  semicolon = ';';
  colon = ':';
  period = '.';

  lt_op = '<';
  gt_op = '>';
  eq_op = '=';
  gteq_op = '>=';

  concat_op = '&';
  plus_op = '+';
  minus_op = '-';
  mult_op = '*';
  div_op = '/';

  asign_op = ':=';
  l_par = '(';
  r_par = ')';
  l_bar = '[';
  r_bar = ']';

  id = (letter | '_') (letter | digit | '_')*;
  intlit = '-'? digit+;
  strlit = '"' ([[not_cr_lf - '"'] - '\']|escape)*  '"';

  eol = (cr | lf | cr lf)+;

  blank = (' ' | tab)+;
  comment = '~' not_cr_lf*;
  
  err_ill_str = '"' [not_cr_lf - '"']*  '"';
  err_unterm_str = '"' [not_cr_lf - '"']*;
  err_ill_char = [0..255];
  
Ignored Tokens

  blank,
  comment;
  
Productions

  start = [e1]:T.eol? class_def class_more* [e2]:T.eol?;
  class_more = T.eol* class_def;
  
  class_def = T.class_kw [start_id]:T.id class_inherit? T.is T.eol 
  		var_decl*
  		method_decl*
  		T.end [end_id]:T.id;
  class_inherit = T.inherits T.from T.id;
  
  var_decl = T.id var_type? var_assign? T.eol;
  var_type = T.colon type;
  var_assign = T.asign_op expression;
  
  method_decl = [start_id]:T.id T.l_par argument_decl_list? T.r_par var_type? T.is [e1]:T.eol
  		var_decl*
  		T.begin [e2]:T.eol
  		statement_list
  		T.end [end_id]:T.id [e3]:T.eol;
  
  argument_decl_list = argument_decl_list2 argument_decl;
  argument_decl_list2 = argument_decl T.semicolon;
  
  argument_decl = T.id T.colon type;
  
  type =  {int}		T.int 
  		| {string}	T.string 
  		| {boolean}	T.boolean 
  		| {id}		T.id 
  		| {exp}		type T.l_bar expression T.r_bar;
  
  statement_list = statement_list2*;
  statement_list2 = statement T.eol;
  
  statement = {assign} 	assignment_stmt
  			| {if} 		if_stmt
  			| {loop}	loop_stmt
  			| {call}	call_stmt;
  
  assignment_stmt = T.id assignment_stmt2* T.asign_op expression;
  assignment_stmt2 = T.l_bar expression T.r_bar;
  
  if_stmt = [start_if]:T.if expression T.then T.eol
  			statement_list
  			else_part?
  			T.end [end_if]:T.if;
  else_part = T.else T.eol statement_list;
  
  loop_stmt = [loop_start]:T.loop T.while expression T.eol
  			statement_list
  			T.end [loop_end]:T.loop;
  
  call_stmt = exp_period? T.id T.l_par expression_list? T.r_par;
  exp_period = expression T.period;
  
  expression_list = expression_list2* expression;
  expression_list2 = expression T.comma;
  
  expression = {or}		expression T.or expr2
  			 | {other}	expr2;
  			 
  expr2 = {and}		expr2 T.and expr3
  		| {other}	expr3;
  
  expr3		 = {eq} 	[e1]:expr5 T.eq_op [e2]:expr5
  			 | {gt} 	[e1]:expr5 T.gt_op [e2]:expr5
  			 | {lt} 	[e1]:expr5 T.lt_op [e2]:expr5
  			 | {gteq} 	[e1]:expr5 T.gteq_op [e2]:expr5
  			 | {other} 	expr5;
  			 
  expr5 = {concat}	expr5 T.concat_op expr6
  		| {other}	expr6;
  			 
  expr6 = {add}		expr6 T.plus_op expr7
  		| {sub}		expr6 T.minus_op expr7
  		| {other}	expr7;
  		
  expr7 = {mul}		expr7 T.mult_op expr8
  		| {div}		expr7 T.div_op expr8
  		| {other}	expr8;
  		
  expr8 = {neg}		T.minus_op expr10
  		| {pos}		T.plus_op expr10
  		| {not}		T.not expr8
  		| {other}	expr10;
  		
  
  expr10 = 	   {id} 		T.id
  			 | {string} 	T.strlit
  			 | {int_lit}	T.intlit
  			 | {true}		T.true
  			 | {false}		T.false
  			 | {null}		T.null
  			 | {me}			T.me
  			 | {new}		T.new type
  			 | {call}		obj_exp? T.id T.l_par T.r_par;
  obj_exp = expr10 T.period;

  exp_id_part = T.l_bar expression T.r_bar;
  			 
  unary_op =  {minus} 	T.minus_op
  			| {plus}	T.plus_op
  			| {not} 	T.not;
  
  relational_op = {lt}   T.lt_op
  				| {gt}   T.gt_op
  				| {eq} 	 T.eq_op
  				| {gteq} T.gteq_op;
  